#!/usr/bin/env perl

package main;

#  PODNAME: ppp
# ABSTRACT: Preprocess Pandoc before Processing Pandoc

use v5.14;
use strict;
use warnings;

use FindBin;

use lib "$FindBin::Bin/../lib";

# use Moo;
# use Data::Printer;
use Smart::Comments;

no autovivification;

state $fileno = 0;
state $outfile;
state $format;
state @children;
state %attributes;

# my $rx = {
#   begin => {
#     code => qr/^[`~]{3,}/,
#     ppp => qr/\s*\{.*?(?<format>rdfdot|ditaa|dot|neato|yuml|plantuml)(?<attributes>.*)\}.*/
#   },
#   end => {
#     
#   }
# }

BEGIN { die "No directory tmp/ available! Please create it" unless -d 'tmp/' }

MAIN: {
  while(<>) {
    if ( (my $start = /^~{3,}\s*\{.*?(?<format>rdfdot|ditaa|dot|neato|yuml|plantuml)(?<attributes>.*)\}.*/) ... (my $end = /^~{3,}\s*$/) ) {
        $start ? begin_ppp() : $end ? end_ppp() : print {$outfile} $_
    } else {
      print
    }
  }
}

SUBS: {
  sub begin_ppp {
    $fileno++;
    $format = $+{format};
    $attributes{$fileno.$format} = $+{attributes};
    open $outfile, '>', "tmp/image-$fileno.$format"
  }

  sub render {
    my ($format, $fileno, %attrs) = @_;
    my $cmd = '';
    
    $format =~ /^ditaa$/ and 
      $cmd = "ditaa"
           . " @{[exists $attrs{'rounded-corners'} ? '--round-corners ' : ' ']}"
           . " @{[exists $attrs{'no-shadows'}      ? '--no-shadows '    : ' ']}"
           . " @{[exists $attrs{'no-separation'}   ? '--no-separation ' : ' ']}"
           . " @{[exists $attrs{'no-antialias'}    ? '--no-antialias '  : ' ']}"
           . " tmp/image-$fileno.$format tmp/image-$fileno.png"
           . " 2>&1 >>tmp/ditaa.log";

    $format =~ /^rdfdot$/ and
      $cmd = "rdfdot"
           . " -ttl"
           . " tmp/image-$fileno.$format tmp/image-$fileno.svg"
           . " 2>&1 >>tmp/rdfdot.log";

    $format =~ /^dot$/ and 
      $cmd = "dot"
           . " -Tsvg"
           . " -o tmp/image-$fileno.svg tmp/image-$fileno.$format"
           . " 2>&1 >>tmp/dot.log";

    $format =~ /^neato$/ and 
      $cmd = "neato"
           . " -Tsvg "
           . " -o tmp/image-$fileno.svg tmp/image-$fileno.$format "
           . " 2>&1 >>tmp/neato.log";

    $format =~ /^yuml$/ and 
      $cmd = "yuml "
           . " --format svg"
           . " --type  @{[exists $attrs{type}      ? $attrs{type}     : 'class']}"
           . " --style @{[exists $attrs{style}     ? $attrs{style}    : 'nofunky']}"
           . " --dir   @{[exists $attrs{direction} ? $attrs{direction}: 'LR']}"
           . " --in tmp/image-$fileno.$format --out tmp/image-$fileno.svg"
           . " 2>&1 >>tmp/yuml.log";

    $format =~ /^plantuml$/ and 
      $cmd = "plantuml"
           . " -tsvg "
           . " -charset UTF-8"
           . " tmp/image-$fileno.$format"
           . " 2>&1 >>tmp/plantuml.log";

    ### $cmd
    system($cmd);
    
  }
  sub scale {
    my ($format, $fileno, %attrs) = @_;
    my $cmd = '';

    # TODO: These two formats should get svg support
    if ($format =~ /^(ditaa)$/) {
      $cmd = "mogrify"
           . " -scale @{[exists $attrs{scale} ? $attrs{scale} : '100%']}"
           . " tmp/image-$fileno.png"
           . " 2>&1 >>tmp/mogrify.log";
    } else {
      my $scale = exists $attrs{scale} ? do { $_ = $attrs{scale}; s/%//; $_/100 }: 1.0;
      $cmd = "rsvg-convert"
           . " --zoom $scale"
           . " --format png"
           . " --output tmp/image-$fileno.png"
           . " tmp/image-$fileno.svg"
           . " 2>&1 >>tmp/plantuml.log";
    };
    ### $cmd
    system($cmd);        
  }

  sub end_ppp {
    close $outfile;

    my %attrs = map { /(.+?)=(["']?.+["']?)/ ? ($1 => $2) : ($_ => 1) } split /\s+\./, $attributes{$fileno.$format};
    if( my $child = fork == 0 ) {
       push @children, $child;
       render($format, $fileno, %attrs);
       scale($format, $fileno, %attrs);
       exit 0;
    }

    $format =
      "![" . (exists $attrs{title} ? $attrs{title} : '' )
           . (exists $attrs{label} ? "\\label{$attrs{label}}" : '' ).
      "]"  .
      "(tmp/image-$fileno.png)" .
      (exists $attrs{inline} ? '\\ ' : '')
    ;
    say STDOUT $format;
    $format = '';
  }
}

END {
  while (1) {
    my $child = waitpid(-1, 0);
    last if $child == -1;       # No more outstanding children
  }
}
